package render

import (
	"fmt"
	"html/template"
	"log"
	"net/http"
)

/* func RenderTemplateTest(w http.ResponseWriter, tmpl string) {
	// we will use this function to render the template
	// we will use the html/template package to render the template
	parsedTemplate, _ := template.ParseFiles("./templates/"+tmpl, "./templates/base.layout.tmpl")

	err := parsedTemplate.Execute(w, nil)
	if err != nil {
		fmt.Println("Error rendering template", err)
	}
} */

var templaeCache = make(map[string]*template.Template)

func RenderTemplate(w http.ResponseWriter, t string) {
	//this function renders a html template to the browser
	//this uses a basic cashing mechanism - using MAP data structure
	var tmpl *template.Template
	var err error
	//check if the template is already in the cache
	_, inMAP := templaeCache[t]
	if !inMAP {
		//if not in the cache, parse the template and add it to the cache
		log.Println("creating template and adding to cache")
		err = createTemplateCache(t)
		if err != nil {
			log.Println("Error creating template cache", err)
		}
	} else {
		//if in the cache, use the cached template
		log.Println("Using cached template...")
	}
	//get the template from the MAP Variable
	tmpl = templaeCache[t]

	//execute the template and write it to the response writer
	err = tmpl.Execute(w, nil)
	if err != nil {
		log.Println("Error rendering template ", err)
	}
}

func createTemplateCache(t string) error {
	templates := []string{
		fmt.Sprintf("./templates/%s", t),
		"./templates/base.layout.tmpl",
	}
	//parse the template and add it to the cache
	tmpl, err := template.ParseFiles(templates...)
	if err != nil {
		log.Println("Error parsing template", err)
	}
	//add the template to the cache
	templaeCache[t] = tmpl

	//return nil if no error
	return nil

}
